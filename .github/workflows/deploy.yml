name: BE CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Check VM status and connectivity
        run: |
          echo "Checking VM instance status..."
          gcloud compute instances describe ${{ secrets.GCP_INSTANCE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --format="value(status,networkInterfaces[0].accessConfigs[0].natIP)" || {
              echo "Failed to describe instance. Please check instance name, project, and zone."
              exit 1
            }

          echo "Testing SSH connectivity..."
          gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="echo 'SSH connection successful'" \
            --ssh-flag="-o ConnectTimeout=10" || {
              echo "SSH connection failed. Running troubleshoot..."
              gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} \
                --project=${{ secrets.GCP_PROJECT_ID }} \
                --zone=${{ secrets.GCP_ZONE }} \
                --troubleshoot
              exit 1
            }

      - name: Create deploy script and transfer JAR
        run: |
          JAR_FILE=$(find build/libs/ -name "*.jar" ! -name "*-plain.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "No executable JAR file found!"
            exit 1
          fi

          JAR_FILENAME=$(basename "$JAR_FILE")
          echo "Found JAR file: $JAR_FILE"

          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          JAR_NAME="__JAR_NAME__"

          echo "Stopping existing application..."
          pkill -f "$JAR_NAME" || true
          sleep 3

          echo "Remote java -version before installation attempt:"
          java -version || true

          echo "Checking java major version..."
          if command -v java >/dev/null 2>&1; then
            JAVA_MAJOR=$(java -version 2>&1 | awk -F'".' '/version/ { if ($2=="1") print $3; else print $2; exit }') || true
            echo "Detected Java major version: $JAVA_MAJOR"
          else
            JAVA_MAJOR=0
            echo "java not found on system"
          fi

          if [ "$JAVA_MAJOR" -lt 17 ]; then
            echo "Java 17+ required. Trying apt, then yum..."

            if command -v apt-get >/dev/null 2>&1; then
              echo "Detected apt-get. Trying apt install openjdk-17..."
              if sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y openjdk-17-jre-headless; then
                echo "openjdk-17 installed via apt"
              else
                echo "apt install failed"
              fi
            fi

            if command -v yum >/dev/null 2>&1; then
              echo "Detected yum. Trying yum install java-17-openjdk..."
              if sudo yum install -y java-17-openjdk-headless || sudo yum install -y java-17-openjdk; then
                echo "openjdk-17 installed via yum"
              else
                echo "yum install failed"
              fi
            fi

            echo "Java version after install attempts:"
            java -version || true

            if command -v java >/dev/null 2>&1; then
              JAVA_MAJOR=$(java -version 2>&1 | awk -F'".' '/version/ { if ($2=="1") print $3; else print $2; exit }') || true
            else
              JAVA_MAJOR=0
            fi

            if [ "$JAVA_MAJOR" -lt 17 ]; then
              echo "Automatic installation did not produce Java 17+. Please install Java 17+ on the VM manually."
              exit 1
            fi
          fi

          echo "Starting new application with Java version:"
          java -version || true

          nohup java -jar ~/$JAR_NAME > ~/app.log 2>&1 &

          sleep 3
          if pgrep -f "$JAR_NAME" > /dev/null; then
            echo "Application started successfully"
            exit 0
          else
            echo "Failed to start application"
            tail -20 ~/app.log || true
            exit 1
          fi
          EOF

          # inject actual jar name into deploy.sh
          sed -i "s|__JAR_NAME__|$JAR_FILENAME|g" deploy.sh

          chmod +x deploy.sh

          # create environment file with secrets
          cat > deploy.env << EOF
          DB_URL='${{ secrets.DB_URL }}'
          DB_USERNAME='${{ secrets.DB_USERNAME }}'
          DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
          JWT_SECRET='${{ secrets.JWT_SECRET }}'
          GOOGLE_EMAIL='${{ secrets.GOOGLE_EMAIL }}'
          GOOGLE_EMAIL_KEY='${{ secrets.GOOGLE_EMAIL_KEY }}'
          NAVER_CLIENT='${{ secrets.NAVER_CLIENT }}'
          NAVER_SECRET='${{ secrets.NAVER_SECRET }}'
          OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}'
          EOF

          # Transfer files to VM
          gcloud compute scp "$JAR_FILE" deploy.sh deploy.env ${{ secrets.GCP_INSTANCE_NAME }}:~/ \
            --project=${{ secrets.GCP_PROJECT_ID }} --zone=${{ secrets.GCP_ZONE }} --scp-flag="-o ConnectTimeout=30"

      - name: Run deploy script on VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --ssh-flag="-o ConnectTimeout=30" \
            --command="bash ~/deploy.sh"

      - name: Cleanup local temp files
        if: always()
        run: |
          rm -f deploy.sh deploy.env
