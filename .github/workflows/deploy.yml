# .github/workflows/deploy.yml

name: BE CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ... (1~5단계는 동일)
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # 6. 배포 스크립트 파일 생성 (수정된 부분)
      - name: Create Deploy Script
        run: |
          JAR_FILE_NAME=$(basename $(find build/libs/ -name "*.jar" ! -name "*-plain.jar"))
          
          # 스크립트 시작 부분에 source ~/.bash_profile 라인을 추가합니다.
          cat > ./deploy.sh << EOF
          #!/bin/bash
          
          # Java 환경 변수를 로드하기 위해 .bash_profile을 실행합니다.
          source ~/.bash_profile
          
          # 기존 프로세스 종료
          echo "Stopping existing application..."
          pkill -f '$JAR_FILE_NAME' || true
          sleep 5
          
          # 환경 변수 설정 (이 부분은 이제 Oracle 환경변수 로딩으로 필요 없을 수 있지만, 명시적으로 유지)
          export DB_URL='${{ secrets.DB_URL }}'
          export DB_USERNAME='${{ secrets.DB_USERNAME }}'
          export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
          export JWT_SECRET='${{ secrets.JWT_SECRET }}'
          export GOOGLE_EMAIL='${{ secrets.GOOGLE_EMAIL }}'
          export GOOGLE_EMAIL_KEY='${{ secrets.GOOGLE_EMAIL_KEY }}'
          export NAVER_CLIENT='${{ secrets.NAVER_CLIENT }}'
          export NAVER_SECRET='${{ secrets.NAVER_SECRET }}'
          export OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}'
          
          # 새 애플리케이션 시작
          echo "Starting new application..."
          nohup java -jar ~/$JAR_FILE_NAME > ~/app.log 2>&1 &
          
          # 프로세스 시작 확인
          sleep 5
          if pgrep -f '$JAR_FILE_NAME' > /dev/null; then
            echo "Application started successfully"
            echo "Process ID: \$(pgrep -f '$JAR_FILE_NAME')"
          else
            echo "Failed to start application. See app.log for details."
            echo "--- Last 20 lines of app.log ---"
            tail -20 ~/app.log
            exit 1
          fi
          EOF

      # 7. JAR 파일 및 배포 스크립트 전송
      - name: Transfer Files to GCP VM
        run: |
          JAR_FILE=$(find build/libs/ -name "*.jar" ! -name "*-plain.jar")
          gcloud compute scp \
            "$JAR_FILE" \
            ./deploy.sh \
            ${{ secrets.GCP_INSTANCE_NAME }}:~/ \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=${{ secrets.GCP_ZONE }}

      # 8. VM에서 배포 스크립트 실행
      - name: Execute Deploy Script on VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="chmod +x ~/deploy.sh && ~/deploy.sh"
