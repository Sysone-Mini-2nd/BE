name: BE CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle로 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 5. GCP 인증
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # 6. 배포 스크립트 파일 생성
      - name: Create Deploy Script
        run: |
          JAR_FILE_NAME=$(basename $(find build/libs/ -name "*.jar" ! -name "*-plain.jar"))
          
          cat > ./deploy.sh << EOF
          #!/bin/bash
          
          # 기존 프로세스 종료
          echo "Stopping existing application..."
          pkill -f '$JAR_FILE_NAME' || true
          sleep 5
          
          # 새 애플리케이션 시작 (찾아낸 Java 17 절대 경로 사용)
          echo "Starting new application..."
          nohup /usr/lib/jvm/java-17-openjdk-17.0.16.0.8-2.0.1.el8.x86_64/bin/java \
            -Dspring.datasource.url='${{ secrets.DB_URL }}' \
            -Dspring.datasource.username='${{ secrets.DB_USERNAME }}' \
            -Dspring.datasource.password='${{ secrets.DB_PASSWORD }}' \
            -Dapp.jwt.secret='${{ secrets.JWT_SECRET }}' \
            -Dspring.ai.openai.api-key='${{ secrets.OPENAI_API_KEY }}' \
            -Dspring.mail.username='${{ secrets.GOOGLE_EMAIL }}' \
            -Dspring.mail.password='${{ secrets.GOOGLE_EMAIL_KEY }}' \
            -Dcloud.naver.clova.client='${{ secrets.NAVER_CLIENT }}' \
            -Dcloud.naver.clova.secret='${{ secrets.NAVER_SECRET }}' \
            -Demail.from='${{ secrets.GOOGLE_EMAIL }}' \
            -jar ~/$JAR_FILE_NAME > ~/app.log 2>&1 &
          
          # 프로세스 시작 확인
          echo "Waiting for application to start..."
          sleep 15
          if pgrep -f '$JAR_FILE_NAME' > /dev/null; then
            echo "Application process is running."
            echo "Process ID: \$(pgrep -f '$JAR_FILE_NAME')"
            echo "--- Last 50 lines of app.log ---"
            tail -50 ~/app.log
          else
            echo "Failed to start application. Check app.log for details."
            echo "--- Last 50 lines of app.log ---"
            tail -50 ~/app.log
            exit 1
          fi
          EOF

      # 7. JAR 파일 및 배포 스크립트 전송
      - name: Transfer Files to GCP VM
        run: |
          JAR_FILE=$(find build/libs/ -name "*.jar" ! -name "*-plain.jar")
          gcloud compute scp \
            "$JAR_FILE" \
            ./deploy.sh \
            ${{ secrets.GCP_INSTANCE_NAME }}:~/ \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=${{ secrets.GCP_ZONE }}
            
      # 8. VM에서 배포 스크립트 실행
      - name: Execute Deploy Script on VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --command="chmod +x ~/deploy.sh && ~/deploy.sh"
